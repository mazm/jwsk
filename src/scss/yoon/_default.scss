@charset "utf-8";
/* **************************************************************************** */
/*	@CreateDate   : 2018.12.27  */
/*	@ModifyDate   :             */
/*	@Description  : scss build  */
/*	@Author       : namu        */
/* ***************************************************************************** */
//* Vendors *//
@import './node_modules/include-media/dist/include-media';

@import 'utils/variables';
@import 'utils/functions';
//@import 'utils/fluidType';
@import 'utils/mixins';
@import 'utils/mq';
@import 'utils/responsive-helper';
//@import 'utils/poly-fluid-sizing';

@import 'base/font';
@import 'base/print';
@import 'base/reset';
@import 'base/common';

//@import 'components/share';
//@import 'vendors/slick';
//@import 'vendors/slick-theme';
//@import 'vendors/simplebar';
//@import 'vendors/swiper';
//@import 'vendors/aos/aos';

//@import 'grid/breadclumb';
//@import 'grid/footer';
@import 'grid/layout';
//@import 'grid/nav';

//@import 'components/board';
@import 'components/buttons';
@import 'components/cs-checkbox';
//@import 'components/tab';
//@import 'components/custom-modal-overlay';

//@import 'pages/kv';
//@import 'pages/theme';
//@import 'pages/history';
@import 'pages/page';


$selectors: "
    .module,
    body.alternate .module
";
$selectorMap: (
    selectorsFoo: ".module",
    selectorsBar: ".moodule-2"
);
$prefix: css-tricks-;


#{$selectors} {
    background: red;
}
.nested {
    #{$selectors} {
        background: red;
    }
}

.#{$prefix}button {
    padding: 0.5rem;
}
.#{$prefix} {
    &module {
        padding: 1rem;
    }
    &header {
        font-size: 110%;
    }
    &footer {
        font-size: 90%;
    }
}

#{map-get($selectorMap, selectorsFoo)} {
    padding: 1rem;
}
@each $selectorName, $actualSelector in $selectorMap {
    #{$actualSelector} {
        padding: 1rem;
    }
}

@function pow($number, $exponent) {
    $value: 1;
    
    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }
    
    @return $value;
}
.foo {
    width: pow(20, 2) * 1px; // 400px
}

/* Centering Mixin */
@mixin setCenter($horizontal: true, $vertical: true) {
    position: absolute;
    @if ($horizontal and $vertical) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else if ($horizontal) {
        left: 50%;
        transform: translate(-50%, 0);
    } @else if ($vertical) {
        top: 50%;
        transform: translate(0, -50%);
    }
}
.parent {
    position: relative;
    background: #f06d06;
    width: 50%;
    height: 200px;
    margin: 20px auto;
}
.child {
    background: white;
    padding: 20px;
    &.both {
        @include setCenter;
    }
    &.horizontal {
        @include setCenter(true, false);
    }
    &.vertical {
        @include setCenter(false, true);
    }
}
/*  */
@mixin rowMachine($numPerRow, $margin) {
    width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
    &:nth-child(n) {
        margin-bottom: $margin;
        margin-right: $margin;
    }
    &:nth-child(#{$numPerRow}n) {
        margin-right: 0;
        margin-bottom: 0;
    }
}
.person {
    width: 100%; overflow: hidden;
    li {
        @include rowMachine(5, 2%);
        background: white;
        padding: 10px;
        float: left;
        box-sizing: border-box;
        min-height: 100px;
        @media (max-width: 1200px) {
            @include rowMachine(4, 2%);
        }
        @media (max-width: 900px) {
            @include rowMachine(3, 4%);
        }
        img {
            max-width: 100%;
        }
    }
}
.person1 {
}
.target:target {
    background-color: red;
}

/* Add a pseudo-element inside the target element */
.target:target::before {
    font: 70% sans-serif;
    content: "â–º";
    color: blue;
    margin: .25em;
}

/* Style italic elements within the target element */
.target:target i {
    color: white;
}
/*  test mixin */

.trans {
    background: blue;
    color: white;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    //position: fixed;
    //top: 50%;
    //left: 50%;
    transition: transform .5s ease-in-out;
    
    --scale: 1;
    transform: /*translateX(-50%) translateY(-50%)*/ scale(var(--scale));
    
    &:hover {
        --scale: 2;
        background: red;
    }
}
