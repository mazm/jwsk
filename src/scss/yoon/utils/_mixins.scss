@charset "utf-8";
@mixin clearfix {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
@mixin clearafter {
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin mo-per($width, $target: 1080) {
	width: ($width / $target) * 100%;
}
@mixin mo-size($width, $height) {
	width: ($width / 3) + px;
	height: ($height /3) + px;
}
@mixin linx($link, $visit, $hover, $active) {
	a {
		color: $link;
		&:visited { color: $visit; }
		&:hover { color: $hover; }
		&:active { color: $active; }
	}
}
@mixin text-ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	display: inline-block;
}
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 5
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}
// rem fontsize
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}
// styleguide:ignore:start
// rem size
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}
@mixin rem-fallback($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';
	
	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$pxValues: #{$pxValues + $value*16}px;
		
		@if $i < $max {
			$pxValues: #{$pxValues + " "};
		}
	}
	
	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));
		$remValues: #{$remValues + $value}rem;
		
		@if $i < $max {
			$remValues: #{$remValues + " "};
		}
	}
	
	#{$property}: $pxValues;
	#{$property}: $remValues;
}

/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
	@each $property, $value in $declarations {
		@each $prefix in $prefixes {
			#{'-' + $prefix + '-' + $property}: $value;
		}
		
		// Output standard non-prefixed declaration
		#{$property}: $value;
	}
}
// Example
// .selector {
//   @include prefix((
//     column-count: 3,
//     column-gap: 1.5em,
//     column-rule: 2px solid hotpink
//   ), webkit moz);
// }
// example
// http://alistapart.com/article/using-css-mod-queries-with-range-selectors?utm_source=codropscollective
//li {
//	@include mod-list(3, 0){
//		@include select-range(3, 5){
//			// css for items 3 to 5 in a list mod 3 remainder = 0
//		}
//	}
//}
// styleguide:ignore:end

@mixin gridlist($leftmargin, $topmargin ) {
	.rig {
		list-style: none;
		font-size: 0;
		margin-left: -$leftmargin;
		> li {
			display: inline-block;
			padding: 0;
			margin: 0 0 $topmargin $leftmargin;
			//background: #fff;
			vertical-align: top;
			box-sizing: border-box;
			//overflow: hidden;
			@include font-size(1.6);
			figure {
				text-align: center;
				figcaption {
					margin: 5px 0;
				}
			}
		}
		&.columns-2 > li {
			width: calc(50% - #{$leftmargin});
		}
		&.columns-3 > li {
			width: calc(33.333% - #{$leftmargin});
		}
		&.columns-4 > li {
			width: calc(25% - #{$leftmargin});
		}
		&.columns-5 > li {
			width: calc(20% - #{$leftmargin});
		}
	}
}
///* mixin for multiline */
@mixin multiLineEllipsis($lineHeight: 1.4em, $lineCount: 2, $bgColor: white){
	overflow: hidden;
	position: relative;
	line-height: $lineHeight;
	max-height: $lineHeight * $lineCount;
	text-align: justify;
	margin-right: -1em;
	padding-right: 1em;
	&:before {
		content: '...';
		position: absolute;
		right: 0;
		bottom: 0;
	}
	&:after {
		content: '';
		position: absolute;
		right: 0;
		width: 1em;
		height: 1em;
		margin-top: 0.2em;
		background: $bgColor;
	}
}
// ex
//.block-with-text {
//	@include multiLineEllipsis($lineHeight: 1.2em, $lineCount: 3, $bgColor: white);
//}



// Breakpoint variables
$max-breakpoint: 1280;
// Media query variables
$wide-screen : "(min-width: #{$max-breakpoint}px)";
@function get-vw($target) {
	$vw-context: ($max-breakpoint*.01) * 1px;
	@return ($target/$vw-context) * 1vw;
}
@mixin vw($size) {
	font-size: get-vw($size);
	@media #{$wide-screen} {
		font-size: $size;
	}
}

@mixin max-vw($attr, $value) {
	#{$attr}: #{$value}vw;
	@media screen and (min-width: 1280px) {
		#{$attr}: ($value/100) * 1280px;
	}
}



///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
	$responsive-unitless: $responsive / ($responsive - $responsive + 1);
	$dimension: if(unit($responsive) == 'vh', 'height', 'width');
	$min-breakpoint: $min / $responsive-unitless * 100;
	
	@media (max-#{$dimension}: #{$min-breakpoint}) {
		font-size: $min;
	}
	
	@if $max {
		$max-breakpoint: $max / $responsive-unitless * 100;
		
		@media (min-#{$dimension}: #{$max-breakpoint}) {
			font-size: $max;
		}
	}
	
	@if $fallback {
		font-size: $fallback;
	}
	
	font-size: $responsive;
}
